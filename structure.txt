Blood_Donation_Service/
├── BDS/
│   ├── templates/
│       ── base.html
│       ── index.html
│   └── static/
│       ── css/
│       ── js/
│       ── images/
│   ├── zDB.sqlite3
│   ├── app.py
│   ├── models.py
│   ├── urls.py
│   └── views.py





Ok for context I'm giving my entire views.py, urls.py and model.py pages:
views.py:
import sqlite3
from flask import *
from models import *
from urls import *
from werkzeug.security import *
from encryption import *
from datetime import *

def home():
    user_count = get_user_count()
    donor_count = get_donor_count()
    hospital_count = get_hospital_count()
    
    return render_template(
        'home.html',
        user_count=user_count,
        donor_count=donor_count,
        hospital_count=hospital_count
    )
    

def register():
    errors = {}

    if request.method == 'POST':
        name = request.form['name']
        username = request.form['username']
        contact = request.form['con']
        age = request.form['age']
        blood_group = request.form['blood_group']
        nid = request.form['nid']
        gender = request.form['gender']
        police_station = request.form['police_station']
        city = request.form['city']
        email = request.form['email']
        password = request.form['pass']

        # Validation
        errors = check_duplicate_fields(username, email, nid, contact)

        if len(password) < 8:
            errors['p'] = "*Password is too short"
        else:
            password = generate_password_hash(password)

        if not errors:
            user_data = {
                'name': name,
                'username': username,
                'contact': contact,
                'age': age,
                'blood_group': blood_group,
                'nid': nid,
                'gender': gender,
                'police_station': police_station,
                'city': city,
                'email': email,
                'password': password
            }

            insert_user(user_data)
            flash('Registered Successfully! Now you can proceed to login.', 'success')
            return redirect(url_for('login'))

        flash('Registration failed. See errors below.', 'danger')

    return render_template('register.html', errors=errors)


def login():
    error = None

    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        user = get_user_by_username(username)

        if user and check_password_hash(user['pass'], password):
            session.clear()
            session['username'] = username
            return redirect('/userhome')
        else:
            error = "Invalid username or password"

    return render_template('login.html', error=error)


def logout():
    session.clear()
    return redirect(url_for('home'))


def user_home():
    if 'username' not in session:
        return redirect(url_for('login'))

    username = session['username']
    
    # Get counts from the existing functions in models.py
    user_count = get_user_count()
    donor_count = get_donor_count()
    hospital_count = get_hospital_count()

    # Check if the user is a donor
    user = get_user_by_username(username)
    is_donor = bool(user) and 'donor_list' in user  # assuming there's a donor_list in user, adapt this

    return render_template('user_home.html',
                           user_count=user_count,
                           donor_count=donor_count,
                           hospital_count=hospital_count,
                           is_donor=is_donor)


def user_profile():
    if 'username' not in session:
        return redirect(url_for('login'))
    
    user = get_user_by_username(session['username'])

    return render_template('user_profile.html', user=user)


def report_user():
    if request.method == 'POST':
        contact = request.form['contact']
        reason = request.form['reason']
        reported_by = session.get('username')

        if not user_exists_by_contact(contact):
            flash("None of our users have this contact number.", "error")
            return redirect(url_for('report_user'))

        submit_report(reported_by, contact, reason)
        flash("Report submitted successfully.", "success")
        return redirect(url_for('user_web_view'))

    return render_template('report_user.html')


def change_password():
    if 'username' not in session:
        return redirect(url_for('login'))

    if request.method == 'POST':
        username = session['username']
        current_password = request.form['current_password']
        new_password = request.form['new_password']
        confirm_password = request.form['confirm_new_password']

        if new_password != confirm_password:
            flash("New passwords do not match!", "error")
            return redirect(request.url)

        user = get_user_by_username(username)
        if user and check_password_hash(user['pass'], current_password):
            new_hash = generate_password_hash(new_password)
            update_user_password(username, new_hash)
            flash("Password updated successfully!", "success")
            return redirect(url_for('user_profile'))  # or profile/dashboard
        else:
            flash("Current password is incorrect!", "error")

    return render_template('change_password.html')


def delete_account():
    if 'username' not in session:
        return redirect(url_for('login'))  

    if request.method == 'POST':
        username = session['username']
        password = request.form['password']
        confirm = request.form['confirm_password']

        if password != confirm:
            flash("Passwords do not match!", "error")
            return redirect(request.url)

        user = get_user_by_username(username)

        if user and check_password_hash(user['pass'], password):  
            # Perform account deletion
            delete_user(username)
            session.clear() 
            flash("Sorry to see you go. Account deleted.", "success")
            return redirect(url_for('login')) 
        else:
            flash("Incorrect password!", "error")  

    return render_template('delete_account.html')


def trusted_hospitals():
    hospitals = get_trusted_hospitals()
    return render_template('trusted_hospitals.html', hospitals=hospitals)


def donation_view():
    if request.method == 'POST':
        username = request.form['username']
        has_suffered = request.form['hasSuffered']
        has_disease = request.form['hasDisease']
        is_smoker = request.form['isSmoker']
        donation_date = request.form['donationDate']
        approver_hospital = request.form['approverHospital']

        if has_suffered == 'YES' or has_disease == 'YES' or is_smoker == 'YES':
            flash('Denied due to medical history', 'error')
            return redirect(url_for('donation_form'))

        if not is_trusted_hospital(approver_hospital):
            flash('Approval is not from a trusted hospital.', 'error')
            return redirect(url_for('donation_form'))

        if is_already_donor(username):
            flash('You are already a donor.', 'info')
            return redirect(url_for('user_home'))

        add_donor(username, donation_date, approver_hospital)
        flash('You have been added as a donor. Thank You', 'success')
        return redirect(url_for('user_home'))

    return render_template('donation_form.html')


def request_blood():
    if request.method == 'POST':
        if 'username' in session:
            loggedInUsername = session['username']
        else:
            return "User not logged in."

        # Collect form data
        name = request.form['name']
        age = request.form['age']
        blood_type = request.form['blood_type']
        quantity = request.form['quantity']
        unit = request.form['unit']
        hospital = request.form['hospital']
        date_needed = request.form['date_needed']
        contact = request.form['contact']
        reason = request.form['reason']

        if not all([name, age, blood_type, quantity, unit, hospital, date_needed, contact, reason]):
            return "<script>alert('All fields are required.\nPlease fill them up with correct information.')</script>"

        insert_blood_request(loggedInUsername, name, age, blood_type, quantity, unit, hospital, date_needed, contact, reason)

        return redirect(url_for('user_web_view'))

    return render_template('request_blood.html')


def donor_list():
    donors = get_donor_list()
    return render_template("donor_list.html", donors=donors)

models.py:
import sqlite3
from werkzeug.security import *

DB_PATH = 'zDB.sqlite3'


def insert_user(data):
    conn = sqlite3.connect(DB_PATH)
    query = '''
        INSERT INTO user_list 
        (username, name, contact, email, pass, age, blood_group, NID, gender, police_station, city)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    '''
    conn.execute(query, (
        data['username'], data['name'], data['contact'], data['email'],
        data['password'], data['age'], data['blood_group'], data['nid'],
        data['gender'], data['police_station'], data['city']
    ))
    conn.commit()
    conn.close()

def check_duplicate_fields(username, email, nid, contact):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    errors = {}
    if cursor.execute("SELECT 1 FROM user_list WHERE username = ?", (username,)).fetchone():
        errors['u'] = "  *User Name Exists! Create another one."
    if cursor.execute("SELECT 1 FROM user_list WHERE email = ?", (email,)).fetchone():
        errors['e'] = "  *Email Exists! Use another one."
    if cursor.execute("SELECT 1 FROM user_list WHERE NID = ?", (nid,)).fetchone():
        errors['n'] = "  *NID Exists!"
    if cursor.execute("SELECT 1 FROM user_list WHERE contact = ?", (contact,)).fetchone():
        errors['c'] = "  *Contact Exists! Use another one."

    conn.close()
    return errors


def get_user_by_username(username):
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()

    cursor.execute("SELECT * FROM user_list WHERE username = ?", (username,))
    user = cursor.fetchone()

    conn.close()
    return user


def get_user_count():
    conn = sqlite3.connect(DB_PATH)
    count = conn.execute('SELECT COUNT(*) FROM user_list').fetchone()[0]
    conn.close()
    return count

def get_donor_count():
    conn = sqlite3.connect(DB_PATH)
    count = conn.execute('SELECT COUNT(*) FROM donor_list').fetchone()[0]
    conn.close()
    return count

def get_hospital_count():
    conn = sqlite3.connect(DB_PATH)
    count = conn.execute('SELECT COUNT(*) FROM trusted_hospitals').fetchone()[0]
    conn.close()
    return count


def user_exists_by_contact(contact):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT contact FROM user_list WHERE contact = ?", (contact,))
    result = cursor.fetchone()
    conn.close()
    return result is not None

def submit_report(reported_by, contact, reason):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO report_box (reported_by, donor_contact, report_box) VALUES (?, ?, ?)",
        (reported_by, contact, reason)
    )
    conn.commit()
    conn.close()

def get_user_password(username):
    db = sqlite3.connect(DB_PATH)
    cursor = db.cursor()
    cursor.execute("SELECT pass FROM user_list WHERE username=?", (username,))
    result = cursor.fetchone()
    db.close()
    return result[0] if result else None

def update_user_password(username, new_password_hash):
    db = sqlite3.connect(DB_PATH)
    cursor = db.cursor()
    cursor.execute("UPDATE user_list SET pass=? WHERE username=?", (new_password_hash, username))
    db.commit()
    db.close()

def delete_user(username):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("DELETE FROM user_list WHERE username = ?", (username,))
    conn.commit()
    conn.close()

def get_trusted_hospitals():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM trusted_hospitals")
    hospitals = cursor.fetchall()
    conn.close()
    return hospitals

def is_trusted_hospital(hospital_name):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT hospital_name FROM trusted_hospitals WHERE hospital_name = ?", (hospital_name,))
    result = cursor.fetchone()
    conn.close()
    return result is not None

def is_already_donor(username):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM donor_list WHERE username = ?", (username,))
    result = cursor.fetchone()
    conn.close()
    return result is not None

def add_donor(username, donation_date, approver_hospital):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("INSERT INTO donor_list (username, previous_donation, approver_hospital) VALUES (?, ?, ?)",
                   (username, donation_date, approver_hospital))
    conn.commit()
    conn.close()
    

def insert_blood_request(request_by, name, age, blood_group, quantity, hospital_unit, hospital_name, date_needed, contact, reason):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('''INSERT INTO blood_requests 
                      (request_by, name, age, blood_group, quantity, hospital_unit, hospital_name, date_needed, contact, reason) 
                      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)''', 
                   (request_by, name, age, blood_group, quantity, hospital_unit, hospital_name, date_needed, contact, reason))
    conn.commit()
    conn.close()

def get_all_blood_requests():
    conn = sqlite3.connect(DB_PATH)
    requests = conn.execute('SELECT * FROM blood_requests').fetchall()
    conn.close()
    return requests

def get_donor_list():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    query = """
        SELECT u.name, u.age, u.blood_group, u.contact, u.police_station, u.city
        FROM donor_list d
        INNER JOIN user_list u ON d.username = u.username
    """
    cursor.execute(query)
    donors = cursor.fetchall()
    conn.close()
    return donors

urls.py:
from flask import Flask
from views import *

app = Flask(__name__)
app.secret_key = '2N3a3Y4e1e0M91@f2a1rd3o0u1s1a4S7K2*'

app.add_url_rule('/', view_func=home, endpoint='home')

app.add_url_rule('/register', view_func=register, methods=['GET', 'POST'])
app.add_url_rule('/login', view_func=login, methods=['GET', 'POST'])
app.add_url_rule('/userhome', view_func=user_home, endpoint='user_home')
app.add_url_rule('/user_profile', view_func=user_profile)

app.add_url_rule('/change_password', 'change_password', change_password, methods=['GET', 'POST'])
app.add_url_rule('/delete_account', 'delete_account', delete_account, methods=['GET', 'POST'])
app.add_url_rule('/report_user', view_func=report_user, methods=['GET', 'POST'])

app.add_url_rule('/donation', 'donation_form', donation_view, methods=['GET', 'POST'])
app.add_url_rule('/donor_list', 'donor_list', donor_list)
app.add_url_rule('/trusted_hospitals', 'trusted_hospitals', trusted_hospitals)
app.add_url_rule('/request_blood', 'request_blood', request_blood, methods=['GET', 'POST'])


app.add_url_rule('/logout', view_func=logout, endpoint='logout')


I also have a  basic encryption.py:
from cryptography.fernet import Fernet
from werkzeug.security import *
import os


FERNET_KEY = b'tjDmLEm-WwF5nPJuoTDIp9vyyv9AKp6_iY_t_KFAa7Q='
fernet = Fernet(FERNET_KEY)

def encrypt_data(data):
    """Encrypt sensitive data before storage"""
    if data is None:
        return None
    return fernet.encrypt(data.encode()).decode()

def decrypt_data(data):
    """Decrypt data for display/use"""
    if data is None:
        return None
    try:
        return fernet.decrypt(data.encode()).decode()
    except:
        return data  # Return original if decryption fails

def hash_password(password):
    """Generate a secure password hash"""
    return generate_password_hash(password)

def verify_password(hashed_password, password):
    """Verify a password against its hash"""
    return check_password_hash(hashed_password, password)